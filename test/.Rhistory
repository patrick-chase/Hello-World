knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(Synth)
library(devtools)
if(!require(SCtools)) devtools::install_github("bcastanho/SCtools")
library(SCtools)
library(tidyverse)
library(haven)
library(Synth)
library(devtools)
if(!require(SCtools)) devtools::install_github("bcastanho/SCtools")
library(SCtools)
library(dplyr)
library(tidyverse)
library(haven)
library(Synth)
library(devtools)
if(!require(SCtools)) devtools::install_github("bcastanho/SCtools")
library(SCtools)
library(dplyr)
# data read in
teen_preg <- read.csv("https://raw.githubusercontent.com/patrick-chase/Hello-World/main/Causal%20Inference%20Working%20Folder/NCHS_-_U.S._and_State_Trends_on_Teen_Births.csv")
read_data <- function(df)
{
full_path <- paste("https://raw.github.com/scunning1975/mixtape/master/",
df, sep = "")
df <- read_dta(full_path)
return(df)
}
texas <- read_data("texas.dta") %>%
as.data.frame(.)
# Filtering data sets for 1990-2000 and focusing on all teenagers (Age.Group..Years == "18-19 years")
teen_preg <- teen_preg %>%
filter(Year >= 1990, Year <= 2000) %>%
rename(state = State, year = Year)
teen_preg <- subset(teen_preg, state != "Total U.S." & Age.Group..Years. != "15-17 years" & Age.Group..Years. != "18-19 years")
texas <- texas %>%
filter(year >= 1990, year <= 2000)%>%
group_by(year)
#merging data sets
prep_data_in <- merge(teen_preg, texas, by = c("year", "state"))
prep_data_in$State.Births <-  as.numeric(as.character(prep_data_in$State.Births))
library(tidyverse)
library(haven)
library(Synth)
library(devtools)
if(!require(SCtools)) devtools::install_github("bcastanho/SCtools")
library(SCtools)
dataprep_out <- dataprep(
foo = prep_data_in,
predictors = c("poverty", "income", "bmprison", "alcohol", "aidscapita", "black", "perc1519"),
predictors.op = "mean",
time.predictors.prior = 1990:1993,
dependent = "State.Rate",
unit.variable = "statefip",
unit.names.variable = "state",
time.variable = "year",
treatment.identifier = 48,
controls.identifier = c(1,2,4:6,8:13,15:42,44:47,49:51,53:56),
time.optimize.ssr = 1990:1993,
time.plot = 1990:2000
)
synth_out <- synth(data.prep.obj = dataprep_out)
path.plot(synth_out, dataprep_out)
gaps.plot(synth_out, dataprep_out)
placebos <- generate.placebos(dataprep_out, synth_out, Sigf.ipop = 3)
mspe.plot(placebos, discard.extreme = TRUE, mspe.limit = 1, plot.hist = TRUE)
View(prep_data_in)
View(teen_preg)
knitr::opts_chunk$set(echo = TRUE)
wine <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/wine.csv")
library(tidyverse)
library(ggplot2)
library(lubridate)
library(randomForest)
library(splines)
library(pdp)
library(rsample)
library(modelr)
wine <- wine %>%
mutate(color = as.factor(color))
wine$is_red = ifelse(wine$color=="red", 1, 0)
wine_scaled <- wine[c(1:12, 14)]
pca_wine = prcomp(wine_scaled[c(1:11)], rank = 30, scale = TRUE)
summary(pca_wine)
wine_combined = data.frame(wine,
pca_wine$x)
wine_split = initial_split(wine_combined, prop = .8)
wine_train = training(wine_split)
wine_test =  testing(wine_split)
pca_glm <- glm(is_red ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train)
rmse_glm <- modelr::rmse(pca_glm, wine_test)
pca_predict <- predict(pca_glm, wine_test)
AIC(pca_glm)
mean(pca_predict == wine_test$is_red)
head(pca_precit)
head(pca_predict)
mean(pca_predict == wine_test$is_red)
head(pca_predict)
mean(pca_predict == wine_test$is_red)
pca_glm <- glm(is_red ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train, family = binomial)
head(pca_predict)
pca_glm <- glm(is_red ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train, family = binomial)
pca_predict <- predict(pca_glm, wine_test)
head(pca_predict)
rmse_glm <- modelr::rmse(pca_glm, wine_test)
AIC(pca_glm)
mean(pca_predict == wine_test$is_red)
pca_wine = prcomp(wine_scaled[c(1:11)], rank = 30, scale = TRUE)
summary(pca_wine)
wine_combined = data.frame(wine,
pca_wine$x)
wine_split = initial_split(wine_combined, prop = .8)
wine_train = training(wine_split)
wine_test =  testing(wine_split)
pca_glm <- glm(is_red ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train, family = binomial)
pca_predict <- predict(pca_glm, wine_test)
head(pca_predict)
rmse_glm <- modelr::rmse(pca_glm, wine_test)
AIC(pca_glm)
mean(pca_predict == wine_test$is_red)
AIC(pca_glm)
mean(pca_predict == wine_test$is_red)
pca_glm <- glm(is_red ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train, family = binomial(link = "logit") )
tab = table(pca_predict > .5, wine_test$is_red)
tab
accuracy <- sum(diag(tab))/sum(tab)*100
accuracy
wine <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/wine.csv")
library(tidyverse)
library(ggplot2)
library(lubridate)
library(randomForest)
library(splines)
library(pdp)
library(rsample)
library(modelr)
wine <- wine %>%
mutate(color = as.factor(color))
wine$is_red = ifelse(wine$color=="red", 1, 0)
wine_scaled <- wine[c(1:12, 14)]
pca_wine = prcomp(wine[c(1:11)], rank = 30, scale = TRUE)
summary(pca_wine)
wine_combined = data.frame(wine,
pca_wine$x)
wine_split = initial_split(wine_combined, prop = .8)
wine_train = training(wine_split)
wine_test =  testing(wine_split)
pca_glm_red <- glm(is_red ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train, family = binomial(link = "logit") )
pca_predict <- predict(pca_glm, wine_test)
pca_predict <- predict(pca_glm_red, wine_test)
tab_is_red = table(pca_predict > .5, wine_test$is_red)
pca_red_accuracy <- sum(diag(tab_is_red))/sum(tab_is_red)*100
tab_is_red
pca_red_accuracy <- sum(diag(tab_is_red))/sum(tab_is_red)*100
pca_red_accuracy
rmse_glm <- modelr::rmse(pca_glm_red, wine_test)
pca_predict_red <- predict(pca_glm_red, wine_test)
## confusion mtx and rmse
tab_is_red = table(pca_predict_red > .5, wine_test$is_red)
pca_red_accuracy <- sum(diag(tab_is_red))/sum(tab_is_red)*100
rmse_glm <- modelr::rmse(pca_glm_red, wine_test)
tab_is_red
View(wine_train)
# quality model
pca_glm_qual <- lm(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train)
pca_lm_qual <- predict(pca_lm_qual, wine_test)
pca_predict_qual <- predict(pca_lm_qual, wine_test)
pca_lm_qual <- lm(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train)
pca_predict_qual <- predict(pca_lm_qual, wine_test)
pca_qual_accuracy <- sum(diag(tab_is_qual))/sum(tab_is_qual)*100
## quality confusion mtx and rmse
tab_qual = table(pca_predict_qual > .5, wine_test$quality)
pca_qual_accuracy <- sum(diag(tab_qual))/sum(tab_qual)*100
pca_qual_accuracy
?glm
# quality model
pca_lm_qual <- glm(quality ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9, data = wine_train, family = gaussian)
pca_predict_qual <- predict(pca_lm_qual, wine_test)
## quality confusion mtx and rmse
tab_qual = table(pca_predict_qual > .5, wine_test$quality)
pca_qual_accuracy <- sum(diag(tab_qual))/sum(tab_qual)*100
pca_qual_accuracy
rmse_glm <- modelr::rmse(pca_glm_red, wine_test)
rmse_glm <- modelr::rmse(pca_lm_qual, wine_test)
rmse_pca_red <- modelr::rmse(pca_glm_red, wine_test)
rmse_pca_qual <- modelr::rmse(pca_lm_qual, wine_test)
rmse_pca_qual
rmse_pca_red
library(gbm)
install.packages("gbm")
library(gbm)
?gbm
boosted_red <- gbm(is_red ~ . - c(13:25), data = wine_train, n.trees = 100)
wine_split2 = initial_split(wine, prop = .8)
wine_train2 = training(wine_split)
wine_test2 =  testing(wine_split)
View(wine_split2)
View(wine_split)
wine <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/wine.csv")
library(tidyverse)
library(ggplot2)
library(lubridate)
library(randomForest)
library(splines)
library(pdp)
library(rsample)
library(modelr)
wine <- wine %>%
mutate(color = as.factor(color))
wine$is_red = ifelse(wine$color=="red", 1, 0)
pca_wine = prcomp(wine[c(1:11)], rank = 30, scale = TRUE)
summary(pca_wine)
wine_combined = data.frame(wine,
pca_wine$x)
wine_split = initial_split(wine_combined, prop = .8)
wine_train = training(wine_split)
wine_test =  testing(wine_split)
library(gbm)
wine_split2 = initial_split(wine, prop = .8)
wine_train2 = training(wine_split)
wine_test2 =  testing(wine_split)
boosted_red <- gbm(is_red ~ . - , data = wine_train, n.trees = 100)
View(wine_train2)
View(wine)
wine_split2 = initial_split(wine, prop = .8)
wine_train2 = training(wine_split2)
wine_test2 =  testing(wine_split2)
View(wine_train2)
boosted_red <- gbm(is_red ~ . - color - is_red, data = wine_train2, n.trees = 100)
pred_boost_red <- predict(booster_red, wine_test2)
pred_boost_red <- predict(boosted_red, wine_test2)
rmse_boost_red <- modelr::rmse(pca_lm_qual, wine_test)
rmse_boost_red <- modelr::rmse(boosted_red, wine_test)
rmse_boost_red
tabboost_red <- table(pred_boost_red > .5, wine_test2$quality)
boost_red_accuracy <- sum(diag(tabboost_red))/sum(tabboost_red)*100
boost_red_accuracy
tabboost_red
pred_boost_red
forest_red <- randomForest(is_red ~ . - color - is_red, data = wine_train2, n.trees = 100)
yes
forest_red <- randomForest(is_red ~ . - color - is_red, data = wine_train2, n.trees = 100)
library(ggplot2)
library(LICORS)  # for kmeans++
library(foreach)
library(mosaic)
library(LICORS)
install.packages("LICORS")
wine_scaled <- scale(wine, center = ture, scale = true)
wine_scaled <- scale(wine, center = TRUE, scale = TRUE)
wine_scaled <- wine %>%
mutate(color = as.numeric(color)) %>%
scale(wine, center = TRUE, scale = TRUE)
wine_scaled <-
mutate(color = as.numeric(color)) %>%
scale(wine, center = TRUE, scale = TRUE)
wine_scaled <- wine %>%
mutate(color = as.numeric(color)) %>%
scale(wine, center = TRUE, scale = TRUE)
wine_scaled <- wine %>%
mutate(color = as.numeric(color)) %>%
scale(center = TRUE, scale = TRUE)
View(wine_split)
View(wine_scaled)
wine_split2 = initial_split(wine_scaled, prop = .8)
wine_split2 = initial_split(wine_scaled, prop = .8)
View(wine_scaled)
wine_split2 = initial_split(wine_scaled, prop = .8)
wine <- read.csv("https://raw.githubusercontent.com/jgscott/ECO395M/master/data/wine.csv")
library(tidyverse)
library(ggplot2)
library(lubridate)
library(randomForest)
library(splines)
library(pdp)
library(rsample)
library(modelr)
wine <- wine %>%
mutate(color = as.factor(color))
wine$is_red = ifelse(wine$color=="red", 1, 0)
wine_scaled <- wine %>%
mutate(color = as.numeric(color)) %>%
scale(center = TRUE, scale = TRUE)
wine_split2 = initial_split(wine_scaled, prop = .8)
wine_split2 = initial_split(wine, prop = .8)
wine_train2 = training(wine_split2)
wine_test2 =  testing(wine_split2)
?hclust
wine_scaled <- scale(wine, center=TRUE, scale =TRUE)
wine2 <- as.numeric(wine)
wine2 <- wine %>%
mutate(color = as.numeric(color))
wine_scaled <- scale(wine2, center=TRUE, scale =TRUE)
wine_distance_mtx = dist(wine_scaled, method = 'euclidean')
hier_wine = hclust(wine_distance_mtx, method= 'single')
